name: Build and Release

on:
  push:
    branches:
      - '**' # Matches every branch
    tags:
      - '*' # matches every branch that doesn't contain a '/'

env:
  PYTHON_VERSION: 3.12.1

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Print Python version
      run: echo "Python version is $PYTHON_VERSION"
      shell: bash

    - name: Cache pyenv folder
      uses: actions/cache@v4
      with:
        path: ~/.pyenv
        key: ${{ runner.os }}-pyenv-${{ env.PYTHON_VERSION }}
        restore-keys: |
          ${{ runner.os }}-pyenv-

    - name: Cache venv folder
      id: cache-venv
      uses: actions/cache@v4
      with:
        path: venv
        key: ${{ runner.os }}-venv-${{ env.PYTHON_VERSION }}-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-venv-${{ env.PYTHON_VERSION }}
          ${{ runner.os }}-venv-

    - name: Cache pip packages
      id: cache-pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ env.PYTHON_VERSION }}-
          ${{ runner.os }}-pip-

    - name: Cache build Artifacts
      id: cache-build
      uses: actions/cache@v4
      with:
        path: build
        key: ${{ runner.os }}-build-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-build-${{ github.sha }}

    - name: Install
      if: steps.cache-build.outputs.cache-hit != 'true'
      run: |
        make install

    - name: Lint
      if: steps.cache-build.outputs.cache-hit != 'true'
      run: |
        make lint

    - name: Tests
      if: steps.cache-build.outputs.cache-hit != 'true'
      run: |
        make test

  release:
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Restore pyenv cache
      uses: actions/cache@v4
      with:
        path: ~/.pyenv
        key: ${{ runner.os }}-pyenv-${{ env.PYTHON_VERSION }}
        restore-keys: |
          ${{ runner.os }}-pyenv-

    - name: Restore venv cache
      uses: actions/cache@v4
      with:
        path: venv
        key: ${{ runner.os }}-venv-${{ env.PYTHON_VERSION }}-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-venv-${{ env.PYTHON_VERSION }}

    - name: Restore pip packages cache
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ env.PYTHON_VERSION }}-

    - name: Restore build Artifacts cache
      uses: actions/cache@v4
      with:
        path: build
        key: ${{ runner.os }}-build-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-build-${{ github.sha }}

    - name: Create Bundle
      run: |
        make bundle-release

    - name: Read CHANGELOG
      id: read_changelog
      run: |
        changelog_content=$(cat CHANGELOG.md)
        echo "::set-output name=changelog::$changelog_content"

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: ${{ github.ref_name }}
        body: ${{ steps.read_changelog.outputs.changelog }}
        draft: false
        prerelease: false

    - name: Upload Bundle to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: bundle/abletoolkit-bundle.zip
        asset_name: abletoolkit-bundle.zip
        asset_content_type: application/zip
